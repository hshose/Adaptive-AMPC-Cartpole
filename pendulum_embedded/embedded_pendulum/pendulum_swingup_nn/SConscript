# Copyright (c) 2017-2023, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

from os.path import join, abspath, realpath, dirname
import shutil
Import("env")

profile = ARGUMENTS.get("profile", "release")
# SCons tools
env.Append(toolpath=[
])
c_compiler_name = env["CC"]
c_compiler_path = shutil.which(c_compiler_name)

if c_compiler_path is None:
    print(f'Selected compiler "{c_compiler_name}" not found on PATH. Please add its installation directory to the PATH environment variable.')
    exit(1)

env["GCC_PATH"] = dirname(dirname(realpath(c_compiler_path)))

# Toolchain configuration








env.AppendUnique(CPPPATH=[
    abspath("src"),
])

files = [
    env.File("src/pendulum_swingup_nn/embedded_nn_inference/activation_function.cpp"),
    env.File("src/pendulum_swingup_nn/embedded_nn_inference/neural_network.cpp"),
]
library = env.StaticLibrary(target="pendulum_swingup_nn", source=files)

env.AppendUnique(LIBS=[
    library,
])
env.AppendUnique(LIBPATH=[
    abspath(str(library[0].get_dir())),
])
for flags in ["CCFLAGS", "CFLAGS", "CXXFLAGS", "ASFLAGS", "ARCHFLAGS", "LINKFLAGS"]:
	flags_str = ARGUMENTS.get(flags)
	if flags_str is not None:
		flags_list = flags_str.split(",")
		for flag in flags_list:
			if len(flag) > 1 and flag[0] == "~":
				try:
					env[flags].remove(flag[1:])
				except ValueError:
					print("'" + flag[1:] + "' does not exist in " + flags +
						" and therefore can not be removed.")
					print("Info: " + flags + ": " + ", ".join(env[flags]))
					exit(1)
			else:
				env[flags].append(flag)

Return("library")