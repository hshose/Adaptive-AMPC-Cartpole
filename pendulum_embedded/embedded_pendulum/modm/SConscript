# Copyright (c) 2017-2023, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

from os.path import join, abspath, realpath, dirname
import shutil
Import("env")

profile = ARGUMENTS.get("profile", "release")
env["CONFIG_PROFILE"] = profile
env["BUILDPATH"] = join(env["CONFIG_BUILD_BASE"], "scons-" + profile)
env["BASEPATH"] = abspath("..")
env["COMPILERPREFIX"] = "arm-none-eabi-"
# SCons tools
env.Append(toolpath=[
    abspath("scons/site_tools"),
])
env.Tool("artifact")
env.Tool("bmp")
env.Tool("build_target")
env.Tool("comstr")
env.Tool("crashdebug")
env.Tool("dfu")
env.Tool("elf2uf2")
env.Tool("find_files")
env.Tool("gcc_retarget")
env.Tool("gdb")
env.Tool("jlink")
env.Tool("openocd")
env.Tool("qtcreator")
env.Tool("size")
env.Tool("template")
env.Tool("utils")
env.Tool("utils_buildpath")
c_compiler_name = env["CC"]
c_compiler_path = shutil.which(c_compiler_name)

if c_compiler_path is None:
    print(f'Selected compiler "{c_compiler_name}" not found on PATH. Please add its installation directory to the PATH environment variable.')
    exit(1)

env["GCC_PATH"] = dirname(dirname(realpath(c_compiler_path)))

# Toolchain configuration
env.Append(CPPDEFINES = [
    "STM32G4",
])
if profile == "debug":
    env.Append(CPPDEFINES = [
        "MODM_DEBUG_BUILD",
    ])

env["CCFLAGS"] = [
    "-fdata-sections",
    "-ffile-prefix-map={gccpath}=.".format(gccpath=env["GCC_PATH"]),
    "-ffile-prefix-map={project_source_dir}=.".format(project_source_dir=env["BASEPATH"]),
    "-ffunction-sections",
    "-finline-limit=10000",
    "-fno-builtin-printf",
    "-fshort-wchar",
    "-funsigned-bitfields",
    "-funsigned-char",
    "-fwrapv",
    "-g3",
    "-gdwarf-3",
    "-W",
    "-Wall",
    "-Wdouble-promotion",
    "-Wduplicated-cond",
    "-Werror=format",
    "-Werror=maybe-uninitialized",
    "-Werror=overflow",
    "-Werror=sign-compare",
    "-Wextra",
    "-Wlogical-op",
    "-Wno-redundant-decls",
    "-Wpointer-arith",
    "-Wundef",
]
if profile == "release":
    env.Append(CCFLAGS = [
        "-Os",
    ])
if profile == "debug":
    env.Append(CCFLAGS = [
        "-fno-move-loop-invariants",
        "-fno-split-wide-types",
        "-fno-tree-loop-optimize",
        "-Og",
    ])

env["CFLAGS"] = [
    "-std=gnu2x",
    "-Wbad-function-cast",
    "-Wimplicit",
    "-Wredundant-decls",
    "-Wstrict-prototypes",
]

env["CXXFLAGS"] = [
    "-fno-exceptions",
    "-fno-rtti",
    "-fno-unwind-tables",
    "-fno-use-cxa-atexit",
    "-fstrict-enums",
    "-std=c++23",
    "-Wno-volatile",
    "-Woverloaded-virtual",
]

env["ASFLAGS"] = [
    "-g3",
    "-gdwarf-3",
]

env["LINKFLAGS"] = [
    "--specs=nano.specs",
    "--specs=nosys.specs",
    "-L{project_source_dir}".format(project_source_dir=env["BASEPATH"]),
    "-nostartfiles",
    "-Tmodm/link/linkerscript.ld",
    "-Wl,--build-id=sha1",
    "-Wl,--fatal-warnings",
    "-Wl,--gc-sections",
    "-Wl,--no-warn-rwx-segment",
    "-Wl,--no-wchar-size-warning",
    "-Wl,--relax",
    "-Wl,-Map,{target_base}.map,--cref".format(target_base="${TARGET.base}"),
]

env["ARCHFLAGS"] = [
    "-mcpu=cortex-m4",
    "-mfloat-abi=hard",
    "-mfpu=fpv4-sp-d16",
    "-mthumb",
]


# ARCHFLAGS must be known for compiling *and* linking
env.Append(CCFLAGS="$ARCHFLAGS")
env.Append(ASFLAGS="$ARCHFLAGS")
env.Append(LINKFLAGS="$ARCHFLAGS")

# Search all linked static libraries multiple times
env["_LIBFLAGS"] = "-Wl,--start-group " + env["_LIBFLAGS"] + " -Wl,--end-group"
# We need to link libmodm.a with --whole-archive, so that all weak symbols are
# visible to the linker. Functions placed in a linker section list are typically
# not referenced externally, so the linker will discard them when searching.
# From https://sourceware.org/binutils/docs/ld/Options.html#Options:
#     For each archive mentioned on the command line after the --whole-archive option, include every object
#     file in the archive in the link, rather than searching the archive for the required object files.
env["_LIBFLAGS"] = "-Wl,--whole-archive " + env["_LIBFLAGS"] + " -Wl,--no-whole-archive"






# Device configuration
env["CONFIG_DEVICE_NAME"] = "stm32g474ret6"
env["CONFIG_DEVICE_MEMORY"] = [
    {'name': 'flash', 'access': 'rx', 'start': 134217728, 'size': 524288},
    {'name': 'ccm', 'access': 'rwx', 'start': 268435456, 'size': 32768},
    {'name': 'sram1', 'access': 'rwx', 'start': 536870912, 'size': 81920},
    {'name': 'sram2', 'access': 'rwx', 'start': 536952832, 'size': 16384},
]
# Programming configuration
env.Append(MODM_OPENOCD_CONFIGFILES = "$BASEPATH/modm/openocd.cfg")
env.Append(MODM_JLINK_DEVICE = "stm32g474re")
env.Append(MODM_GDBINIT = "$BASEPATH/modm/gdbinit")
env.Append(MODM_GDBINIT_OPENOCD = "$BASEPATH/modm/gdbinit_openocd")
env.Append(MODM_GDBINIT_JLINK = "$BASEPATH/modm/gdbinit_jlink")
env.Append(MODM_GDBINIT_BMP = "$BASEPATH/modm/gdbinit_bmp")
env.Append(MODM_GDB_COMMANDS = ["dir $GCC_PATH", "modm_setup_tui"])
# XPCC generator tool path
env["XPCC_SYSTEM_DESIGN"] = "$BASEPATH/modm/tools/xpcc_generator"
env.AppendUnique(CPPPATH=[
    abspath("ext"),
    abspath("ext/cmsis/core"),
    abspath("ext/cmsis/device"),
    abspath("ext/cmsis/dsp"),
    abspath("src"),
])

files = [
    env.File("ext/gcc/cabi.c"),
    env.File("ext/gcc/cxxabi.cpp"),
    env.File("ext/gcc/new_delete.cpp"),
    env.File("src/modm/architecture/driver/atomic/flag.cpp"),
    env.File("src/modm/board/board.cpp"),
    env.File("src/modm/io/iostream.cpp"),
    env.File("src/modm/io/iostream_printf.cpp"),
    env.File("src/modm/math/utils/bit_operation.cpp"),
    env.File("src/modm/math/utils/pc/operator.cpp"),
    env.File("src/modm/platform/adc/adc_interrupt_1.cpp"),
    env.File("src/modm/platform/adc/adc_interrupt_2.cpp"),
    env.File("src/modm/platform/adc/adc_shared_interrupts.cpp"),
    env.File("src/modm/platform/clock/rcc.cpp"),
    env.File("src/modm/platform/clock/systick_timer.cpp"),
    env.File("src/modm/platform/core/assert.cpp"),
    env.File("src/modm/platform/core/delay.cpp"),
    env.File("src/modm/platform/core/delay_ns.cpp"),
    env.File("src/modm/platform/core/no_heap.c"),
    env.File("src/modm/platform/core/reset_handler.sx"),
    env.File("src/modm/platform/core/startup.c"),
    env.File("src/modm/platform/core/startup_platform.c"),
    env.File("src/modm/platform/core/vectors.c"),
    env.File("src/modm/platform/gpio/enable.cpp"),
    env.File("src/modm/platform/timer/timer_1.cpp"),
    env.File("src/modm/platform/timer/timer_2.cpp"),
    env.File("src/modm/platform/timer/timer_20.cpp"),
    env.File("src/modm/platform/timer/timer_3.cpp"),
    env.File("src/modm/platform/uart/uart_2.cpp"),
]
flags = {"CCFLAGS": ['$CCFLAGS', '-Wno-double-promotion', '-Wno-overflow'], }
files.append(env.Object("ext/printf/printf.c", **flags))
library = env.StaticLibrary(target="modm", source=files)

env.AppendUnique(LIBS=[
    library,
])
env.AppendUnique(LIBPATH=[
    abspath(str(library[0].get_dir())),
])
for flags in ["CCFLAGS", "CFLAGS", "CXXFLAGS", "ASFLAGS", "ARCHFLAGS", "LINKFLAGS"]:
	flags_str = ARGUMENTS.get(flags)
	if flags_str is not None:
		flags_list = flags_str.split(",")
		for flag in flags_list:
			if len(flag) > 1 and flag[0] == "~":
				try:
					env[flags].remove(flag[1:])
				except ValueError:
					print("'" + flag[1:] + "' does not exist in " + flags +
						" and therefore can not be removed.")
					print("Info: " + flags + ": " + ", ".join(env[flags]))
					exit(1)
			else:
				env[flags].append(flag)

Return("library")